- name: Install Packages
  package:
    name:
      - haproxy

- name: Setting HAProxy
  blockinfile:
    path: /etc/haproxy/haproxy.cfg
    block: |
      frontend k8s-controller
          mode tcp
          bind *:6443
          default_backend k8s-controller
      backend k8s-controller
          balance roundrobin
          mode tcp
          default-server check maxconn 20
          server kube-ctrl-1 192.168.0.21:6443
          # server kube-ctrl-2 192.168.0.22:6443
          # server kube-ctrl-3 192.168.0.23:6443
      frontend fluentd
          mode tcp
          bind *:24224
          default_backend fluentd
      backend fluentd
          balance roundrobin
          mode tcp
          default-server check maxconn 20
          server fluentd-1 192.168.0.21:23224
          # server kube-ctrl-2 192.168.0.22:6443
          # server kube-ctrl-3 192.168.0.23:6443
# - name: Install Google Cloud public signing key
#   get_url:
#     url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
#     dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg
#     mode: '0644'

# - name: Add the Kubernetes apt repository
#   lineinfile:
#     path: /etc/apt/sources.list.d/kubernetes.list
#     line: deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main
#     create: yes
    
# - name: Install Kubernetes Packages
#   apt:
#     pkg:
#       - kubelet
#       - kubeadm
#       - kubectl
#     update_cache: yes

# - name: Hold Kubernetes Packages
#   dpkg_selections:
#     name: '{{item}}'
#     selection: hold
#   with_items:
#     - kubelet
#     - kubeadm
#     - kubectl

# sudo apt-get update
# sudo apt-get install -y 
# sudo apt-mark hold kubelet kubeadm kubectl
        
# - name: Setting Sysctl
#   lineinfile:
#     path=/etc/default/grub
#     regexp='^{{item}}.*'
#     line='{{item}}=1'
#   with_items:
#     - net.bridge.bridge-nf-call-ip6tables
#     - net.bridge.bridge-nf-call-iptables = 1
#   notify:
#     reload sysctl

# - name: Setting Sysctl

#     sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
# sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
# sudo update-alternatives --set arptables /usr/sbin/arptables-legacy
# sudo update-alternatives --set ebtables /usr/sbin/ebtables-legacy
    
# - name: Install Packages
#   apt:
#     pkg: [ 'emacs-nox', 'git', 'lsb-release', 'postfix', 'mosh', 'sysstat', 'glances' ]
#     update_cache: yes

# - name: Gather package facts
#   package_facts:
#     manager: apt

# - name: Change Apt Repository
#   replace:
#     path: /etc/apt/sources.list
#     regexp: 'http://archive\.ubuntu\.com'
#     replace: 'http://jp.archive.ubuntu.com'

# - name: Setting Timezone
#   timezone:
#     name: Asia/Tokyo

# - name: Generate Locales
#   locale_gen:
#     name: "{{ item }}"
#     state: present
#   with_items:
#     - en_US.UTF-8
#     - ja_JP.UTF-8

# - name: Setting Sysctl
#   template:
#     src=sysctl/sysctl.conf.j2 dest=/etc/sysctl.conf
#     owner=root
#     group=root
#     mode=0440
#   notify:
#     reload sysctl

# - name: Setting GRUB
#   lineinfile:
#     path=/etc/default/grub
#     regexp='^GRUB_RECORDFAIL_TIMEOUT=.*'
#     line='GRUB_RECORDFAIL_TIMEOUT=1'
#   notify:
#     update grub

# - name: Setting Sudo
#   template:
#     src=sudo/sudoers.j2 dest=/etc/sudoers
#     owner=root
#     group=root
#     mode=0440

# - name: Setting SSHD
#   template:
#     src=ssh/sshd_config.j2 dest=/etc/ssh/sshd_config
#   notify:
#     restart sshd

# - name: Setting Rsyslog
#   template:
#     src=rsyslog/{{ item.name }}.j2 dest={{ item.path }}/{{ item.name }}
#   with_items:
#     - { name: rsyslog.conf, 	    path: /etc }
#     - { name: 10-equipment.conf,  path: /etc/rsyslog.d }
#   notify: restart rsyslog


# - name: Install NTP server
#   apt:
#     pkg=ntp
#     state=present
#   when: ntp_server is defined

# - name: Setting NTP server
#   template:
#     src=ntp/ntp.conf-server.j2 dest=/etc/ntp.conf
#     owner=ntp
#     group=ntp
#   when: ntp_server is defined
#   notify: restart ntp

# - name: Setting ntpdate
#   blockinfile:
#     dest: '/etc/rc.local'
#     content: |
#       sudo /etc/init.d/ntp stop
#       ntpdate ntp.nict.jp
#       sudo /etc/init.d/ntp start
#     insertafter: '^#!/.*'
#   when: ntp_server is defined

# - name: Setting NTP client
#   replace:
#     path: /etc/systemd/timesyncd.conf
#     regexp: '^#NTP='
#     replace: 'NTP={{ network.ntp }}'
#   notify: restart timesyncd

# - name: Disable sleep
#   systemd:
#     name: '{{item}}'
#     masked: 'yes'
#   with_items:
#     - sleep.target
#     - suspend.target
#     - hibernate.target
#     - hybrid-sleep.target

# Local Variables:
# mode: yaml
# tab-width: 4
# End:
